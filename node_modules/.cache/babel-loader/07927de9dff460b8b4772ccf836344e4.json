{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\Alura\\\\src\\\\components\\\\Carousel\\\\components\\\\FormField\\\\index.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styled, { css } from 'styled-components';\nconst FormFieldWrapper = styled.div`\n  position: relative; \n  textarea {\n    min-height: 150px;\n  }\n\n  input[type=\"color\"] {\n    padding-left: 56px;\n  }\n`;\nconst Label = styled.label``;\nLabel.Text = styled.span`\n  color: #E5E5E5;\n  height: 57px;\n  position: absolute; \n  top: 0;\n  left: 16px;\n  \n  display: flex;\n  align-items: center;\n  \n  transform-origin: 0% 0%;\n  font-size: 18px;\n  font-style: normal;\n  font-weight: 300;\n  \n  transition: .1s ease-in-out;\n`;\nconst Input = styled.input`\n  background: #53585D;\n  color: #F5F5F5;\n  display: block;\n  width: 100%;\n  height: 57px;\n  font-size: 18px;\n  \n  outline: 0;\n  border: 0;\n  border-top: 4px solid transparent;\n  border-bottom: 4px solid #53585D;\n  \n  padding: 16px 16px;\n  margin-bottom: 45px;\n  \n  resize: none;\n  border-radius: 4px;\n  transition: border-color .3s;\n  \n  &:focus {\n    border-bottom-color: var(--primary);\n  }\n\n  &:focus:not([type=\"color\"]) + span {\n    transform: scale(.6) translateY(-10px);\n  }\n\n  ${({\n  hasValue\n}) => hasValue && css`\n    &:not([type=\"color\"]) + span {\n      transform: scale(.6) translateY(-10px);\n    }\n  `}\n`;\n\nfunction FormField({\n  label,\n  type,\n  name,\n  value,\n  onChange,\n  suggestions\n}) {\n  const fieldId = `id_${name}`;\n  const isTypeTextarea = type === 'textarea';\n  const tag = isTypeTextarea ? 'textarea' : 'input';\n  const hasValue = Boolean(value.length);\n  const hasSuggestions = Boolean(suggestions.length);\n  return /*#__PURE__*/React.createElement(FormFieldWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: fieldId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    as: tag,\n    id: fieldId,\n    type: type,\n    value: value,\n    name: name,\n    hasValue: hasValue,\n    onChange: onChange,\n    autoComplete: hasSuggestions ? 'off' : 'on',\n    list: hasSuggestions ? `suggestionFor_${fieldId}` : undefined,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Label.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, label, \":\"), hasSuggestions && /*#__PURE__*/React.createElement(\"datalist\", {\n    id: `suggestionFor_${fieldId}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 21\n    }\n  }, suggestions.map(suggestion => /*#__PURE__*/React.createElement(\"option\", {\n    value: suggestion,\n    key: `suggestionFor_${fieldId}_option${suggestion}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 33\n    }\n  }, suggestion)))));\n}\n\nFormField.defaultProps = {\n  type: 'text',\n  value: '',\n  onChange: () => {},\n  suggestions: []\n};\nFormField.propTypes = {\n  label: PropTypes.string.isRequired,\n  type: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  suggestions: PropTypes.arrayOf(PropTypes.string)\n};\nexport default FormField;","map":{"version":3,"sources":["C:/Users/User/OneDrive/Área de Trabalho/Alura/src/components/Carousel/components/FormField/index.js"],"names":["React","PropTypes","styled","css","FormFieldWrapper","div","Label","label","Text","span","Input","input","hasValue","FormField","type","name","value","onChange","suggestions","fieldId","isTypeTextarea","tag","Boolean","length","hasSuggestions","undefined","map","suggestion","defaultProps","propTypes","string","isRequired","func","arrayOf"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled, { css } from 'styled-components';\r\n\r\nconst FormFieldWrapper = styled.div`\r\n  position: relative; \r\n  textarea {\r\n    min-height: 150px;\r\n  }\r\n\r\n  input[type=\"color\"] {\r\n    padding-left: 56px;\r\n  }\r\n`;\r\n\r\nconst Label = styled.label``;\r\nLabel.Text = styled.span`\r\n  color: #E5E5E5;\r\n  height: 57px;\r\n  position: absolute; \r\n  top: 0;\r\n  left: 16px;\r\n  \r\n  display: flex;\r\n  align-items: center;\r\n  \r\n  transform-origin: 0% 0%;\r\n  font-size: 18px;\r\n  font-style: normal;\r\n  font-weight: 300;\r\n  \r\n  transition: .1s ease-in-out;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  background: #53585D;\r\n  color: #F5F5F5;\r\n  display: block;\r\n  width: 100%;\r\n  height: 57px;\r\n  font-size: 18px;\r\n  \r\n  outline: 0;\r\n  border: 0;\r\n  border-top: 4px solid transparent;\r\n  border-bottom: 4px solid #53585D;\r\n  \r\n  padding: 16px 16px;\r\n  margin-bottom: 45px;\r\n  \r\n  resize: none;\r\n  border-radius: 4px;\r\n  transition: border-color .3s;\r\n  \r\n  &:focus {\r\n    border-bottom-color: var(--primary);\r\n  }\r\n\r\n  &:focus:not([type=\"color\"]) + span {\r\n    transform: scale(.6) translateY(-10px);\r\n  }\r\n\r\n  ${({ hasValue }) => hasValue && css`\r\n    &:not([type=\"color\"]) + span {\r\n      transform: scale(.6) translateY(-10px);\r\n    }\r\n  `}\r\n`;\r\n\r\nfunction FormField({\r\n    label, type, name, value, onChange, suggestions,\r\n}) {\r\n    const fieldId = `id_${name}`;\r\n    const isTypeTextarea = type === 'textarea';\r\n    const tag = isTypeTextarea ? 'textarea' : 'input';\r\n\r\n    const hasValue = Boolean(value.length);\r\n    const hasSuggestions = Boolean(suggestions.length);\r\n\r\n    return (\r\n        <FormFieldWrapper>\r\n            <Label\r\n                htmlFor={fieldId}\r\n            >\r\n                <Input\r\n                    as={tag}\r\n                    id={fieldId}\r\n                    type={type}\r\n                    value={value}\r\n                    name={name}\r\n                    hasValue={hasValue}\r\n                    onChange={onChange}\r\n                    autoComplete={hasSuggestions ? 'off' : 'on'}\r\n                    list={hasSuggestions ? `suggestionFor_${fieldId}` : undefined}\r\n                />\r\n            <Label.Text>\r\n            {label}:\r\n        </Label.Text>\r\n            {\r\n                hasSuggestions && (\r\n                    <datalist id={`suggestionFor_${fieldId}`}>\r\n                        {\r\n                            suggestions.map((suggestion) => (\r\n                                <option value={suggestion} key={`suggestionFor_${fieldId}_option${suggestion}`}>\r\n                                    {suggestion}\r\n                                </option>\r\n                            ))\r\n                        }\r\n                    </datalist>\r\n                )\r\n            }\r\n        </Label>\r\n        </FormFieldWrapper>\r\n    );\r\n}\r\n\r\nFormField.defaultProps = {\r\n    type: 'text',\r\n    value: '',\r\n    onChange: () => { },\r\n    suggestions: [],\r\n};\r\n\r\nFormField.propTypes = {\r\n    label: PropTypes.string.isRequired,\r\n    type: PropTypes.string,\r\n    name: PropTypes.string.isRequired,\r\n    value: PropTypes.string,\r\n    onChange: PropTypes.func,\r\n    suggestions: PropTypes.arrayOf(PropTypes.string),\r\n};\r\n\r\nexport default FormField;"]},"metadata":{},"sourceType":"module"}